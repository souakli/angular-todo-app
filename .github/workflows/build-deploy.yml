name: Build and Deploy Multilingual App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  repository_dispatch:
    types: [lokalise-translation-updated]

permissions:
  contents: write
  pages: write
  id-token: write

env:
  BUILD_PATH: ./dist/angular-todo-app/browser
  LOKALISE_API_KEY: ${{ secrets.LOKALISE_API_KEY }}

jobs:
  cancel:
    name: 'Cancel Previous Runs'
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.12.0
        with:
          access_token: ${{ github.token }}

  update-translations:
    needs: cancel
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'push' || github.event_name == 'repository_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Log webhook event details
        if: github.event_name == 'repository_dispatch'
        run: |
          echo "Webhook event received from Lokalise"
          echo "Event type: ${{ github.event.action }}"
          echo "Source: ${{ github.event.client_payload.source }}"
          echo "Event: ${{ github.event.client_payload.event }}"
          echo "Project ID: ${{ github.event.client_payload.project_id }}"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Extract i18n messages
        run: |
          # Supprimer l'ancien fichier messages.xlf s'il existe
          rm -f src/locale/messages.xlf || true
          # Extraire les nouveaux messages
          npx ng extract-i18n --output-path src/locale --format=xlf
          echo "Messages extracted to messages.xlf"

      - name: Check for Lokalise API Key
        run: |
          if [ -z "${{secrets.LOKALISE_API_KEY }}" ]; then
            echo "::error::LOKALISE_API_KEY is not set in GitHub Secrets. Please add it in your repository settings."
            echo "1. Go to your repository on GitHub"
            echo "2. Click on Settings"
            echo "3. In the left sidebar, click on Secrets and variables > Actions"
            echo "4. Click on New repository secret"
            echo "5. Name: LOKALISE_API_KEY"
            echo "6. Value: Your Lokalise API key"
            echo "7. Click on Add secret"
            exit 1
          else
            echo "LOKALISE_API_KEY is set. Proceeding with translation operations."
          fi

      - name: Upload translations to Lokalise
        env:
          LOKALISE_API_KEY: ${{ secrets.LOKALISE_API_KEY }}
        run: |
          node upload-translations.mjs
          echo "Only French source file (messages.xlf) uploaded to Lokalise"
          
      - name: Wait for Lokalise to process translations
        run: |
          echo "Waiting 30 seconds for Lokalise to process translations..."
          sleep 30
          echo "Wait completed, proceeding to download translations"

      - name: Download fresh translations from Lokalise
        env:
          LOKALISE_API_KEY: ${{ secrets.LOKALISE_API_KEY }}
        run: |
          # Utiliser le script de téléchargement frais
          node download-fresh-translations.mjs
          echo "Content of downloaded Arabic translations:"
          cat src/locale/messages.ar.xlf
          echo "Content of downloaded English translations:"
          cat src/locale/messages.en.xlf
          echo "All translations downloaded fresh from Lokalise"
          
          # Créer un fichier marqueur pour indiquer que les traductions ont été mises à jour
          echo "$(date)" > translation_updated_marker.txt

      - name: Debug translation files
        run: |
          echo "Checking for changes in translation files..."
          git status
          echo "Differences in Arabic translations:"
          git diff -- src/locale/messages.ar.xlf || echo "No differences detected"
          echo "Differences in English translations:"
          git diff -- src/locale/messages.en.xlf || echo "No differences detected"
          
          # Sauvegarder les fichiers de traduction modifiés
          cp src/locale/messages.ar.xlf /tmp/messages.ar.xlf
          cp src/locale/messages.en.xlf /tmp/messages.en.xlf
          cp translation_updated_marker.txt /tmp/translation_updated_marker.txt

      - name: Commit and push updated translation files
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          
          # Afficher l'état avant toute opération
          echo "État initial de Git:"
          git status
          
          # Fetch the latest changes
          git fetch origin
          
          # Reset to match remote branch
          git reset --hard origin/${{ github.ref_name }}
          
          # Restaurer les fichiers de traduction modifiés
          cp /tmp/messages.ar.xlf src/locale/messages.ar.xlf
          cp /tmp/messages.en.xlf src/locale/messages.en.xlf
          cp /tmp/translation_updated_marker.txt translation_updated_marker.txt
          
          # Vérifier que les fichiers ont été restaurés correctement
          echo "Contenu restauré des fichiers de traduction:"
          cat src/locale/messages.ar.xlf | grep -A 2 -B 2 "target"
          cat src/locale/messages.en.xlf | grep -A 2 -B 2 "target"
          
          # Vérifier l'état après restauration
          echo "État après restauration:"
          git status
          
          # Forcer l'ajout des fichiers même s'ils sont identiques
          git add -f src/locale/messages.*.xlf
          git add -f translation_updated_marker.txt
          
          # Vérifier l'état après ajout
          echo "État après git add:"
          git status
          
          # Force commit even if git thinks there are no changes
          git commit -m "Update translations from Lokalise [skip ci]" --allow-empty
          
          # Debug information
          echo "Commit créé avec statut: $?"
          git log -1
          
          # Push avec force pour éviter les rejets
          git push --force "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" HEAD:${{ github.ref_name }}
          echo "Push completed with status: $?"
          echo "Translation files committed and pushed successfully"

  build:
    needs: update-translations
    runs-on: ubuntu-latest
    steps:
      - name: Wait for GitHub to process the pushed translations
        run: |
          echo "Waiting 30 seconds for GitHub to process the pushed translations..."
          sleep 30
          echo "Wait completed, proceeding to checkout"

      - name: Checkout latest code with updated translations
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Show latest commit
        run: |
          echo "Latest commit on the branch:"
          git log -1
          echo "Checking if translation files were updated in the latest commit:"
          git show --name-only | grep -E 'messages|translation' || echo "No translation files updated in this commit"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Show translation files
        run: |
          echo "Content of Arabic translations:"
          cat src/locale/messages.ar.xlf
          echo "Content of English translations:"
          cat src/locale/messages.en.xlf

      - name: Build multilingual app
        run: |
          npm run build -- --configuration=production --localize
          echo "Build output structure:"
          ls -R dist/angular-todo-app/browser/
          
          # Vérifier le contenu des fichiers HTML générés
          echo "Contenu du fichier index.html en arabe:"
          if [ -f "dist/angular-todo-app/browser/ar/index.html" ]; then
            grep -A 3 -B 3 "makayen" dist/angular-todo-app/browser/ar/index.html || echo "Traduction non trouvée dans le fichier HTML"
          else
            echo "Le fichier ar/index.html n'existe pas"
          fi

      - name: List build output
        run: |
          echo "Build output structure:"
          ls -R dist/angular-todo-app/browser/

      - name: Create language redirects
        run: |
          cd dist/angular-todo-app/browser
          # Create index.html that redirects to /fr/ by default
          cat > index.html << 'EOF'
          <!DOCTYPE html>
          <html>
            <head>
              <meta charset="utf-8">
              <title>Redirecting...</title>
              <script>
                // Get browser language
                var lang = navigator.language || navigator.userLanguage;
                lang = lang.split('-')[0];
                
                // Map of supported languages
                var supported = ['fr', 'en', 'ar'];
                
                // Default to 'fr' if language not supported
                if (!supported.includes(lang)) {
                  lang = 'fr';
                }
                
                // Redirect to appropriate language version
                window.location.replace('/angular-todo-app/' + lang + '/');
              </script>
            </head>
            <body>
              <h1>Redirecting to your preferred language...</h1>
              <p>If you are not redirected, please choose a language:</p>
              <ul>
                <li><a href="/angular-todo-app/fr/">Français</a></li>
                <li><a href="/angular-todo-app/en/">English</a></li>
                <li><a href="/angular-todo-app/ar/">العربية</a></li>
              </ul>
            </body>
          </html>
          EOF

          # Create 404.html pages for each language
          for lang in fr en ar; do
            if [ -d "$lang" ]; then
              cp $lang/index.html $lang/404.html
            fi
          done

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
