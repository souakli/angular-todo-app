name: Build and Deploy Multilingual App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Permet de lancer le workflow manuellement depuis l'interface GitHub
  workflow_dispatch:

permissions:
  contents: write

jobs:
  i18n-build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      # Étape 1: Extraction des traductions avec format spécifié
      - name: Extract i18n messages
        run: npx ng extract-i18n --output-path src/locale --format=xlf

      # Étape 2: Upload des fichiers de traduction
      - name: Upload translations
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
        env:
          LOKALISE_API_KEY: '7cd9343a4ee5bd6c3d2066f4cc9eedc8e6de6388'
        run: |
          echo "const LokaliseApi = require('@lokalise/node-api').LokaliseApi;
          const fs = require('fs');
          const apiKey = process.env.LOKALISE_API_KEY;
          const projectId = '7835424467bf5c965b0411.50285011';
          const client = new LokaliseApi({ apiKey });
          async function uploadTranslations() {
              try {
                  console.log('Reading source file...');
                  const filePath = 'src/locale/messages.xlf';
                  const fileContent = fs.readFileSync(filePath, 'base64');
                  console.log('Uploading translations...');
                  const response = await client.files().upload(projectId, {
                      data: fileContent,
                      filename: 'messages.xlf',
                      lang_iso: 'fr',
                      convert_placeholders: true,
                      detect_icu_plurals: true,
                      apply_tm: true,
                      tags: ['angular'],
                      format: 'xlf',
                      cleanup_mode: true,
                      replace_modified: true,
                      skip_detect_lang_iso: false,
                      use_automations: true
                  });
                  console.log('Upload successful!');
              } catch (error) {
                  console.error('Error:', error.message);
                  process.exit(1);
              }
          }
          uploadTranslations();" > upload.js
          node upload.js

      # Étape 3: Download des traductions mises à jour
      - name: Download translations
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
        env:
          LOKALISE_API_KEY: '7cd9343a4ee5bd6c3d2066f4cc9eedc8e6de6388'
        run: |
          echo "const LokaliseApi = require('@lokalise/node-api').LokaliseApi;
          const https = require('https');
          const fs = require('fs');
          const unzipper = require('unzipper');
          const path = require('path');
          const apiKey = process.env.LOKALISE_API_KEY;
          const projectId = '7835424467bf5c965b0411.50285011';
          const client = new LokaliseApi({ apiKey });
          async function downloadTranslations() {
              try {
                  console.log('Requesting download from Lokalise...');
                  const response = await client.files().download(projectId, {
                      format: 'xlf',
                      original_filenames: false,
                      directory_prefix: '',
                      filter_langs: ['fr', 'en', 'ar'],
                      export_empty_as: 'skip',
                      export_sort: 'last_updated_desc',
                      replace_breaks: false,
                      include_comments: false,
                      include_description: false,
                      include_path: false,
                      indentation: '2sp',
                      json_unescaped_slashes: true,
                      placeholder_format: 'i18n',
                      escape_percent: false,
                      add_newlines: true,
                      yaml_include_root: false,
                      bundle_structure: '%LANG_ISO%.%FORMAT%'
                  });
                  if (response.bundle_url) {
                      const zipFile = fs.createWriteStream('translations.zip');
                      https.get(response.bundle_url, (res) => {
                          res.pipe(zipFile);
                          zipFile.on('finish', () => {
                              zipFile.close();
                              fs.createReadStream('translations.zip')
                                  .pipe(unzipper.Extract({ path: 'temp_translations' }))
                                  .on('close', () => {
                                      if (!fs.existsSync('src/locale')) {
                                          fs.mkdirSync('src/locale', { recursive: true });
                                      }
                                      const tempDir = path.join('temp_translations', 'locale');
                                      if (fs.existsSync(tempDir)) {
                                          const files = fs.readdirSync(tempDir);
                                          files.forEach(file => {
                                              if (file.endsWith('.xlf')) {
                                                  const sourcePath = path.join(tempDir, file);
                                                  const targetPath = path.join('src/locale', `messages.${file}`);
                                                  fs.copyFileSync(sourcePath, targetPath);
                                              }
                                          });
                                      }
                                      fs.rmSync('temp_translations', { recursive: true, force: true });
                                      fs.unlinkSync('translations.zip');
                                  });
                          });
                      });
                  }
              } catch (error) {
                  console.error('Error:', error);
                  process.exit(1);
              }
          }
          downloadTranslations();" > download.js
          node download.js

      # Étape 4: Commit des nouvelles traductions si elles ont changé
      - name: Commit updated translations
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'push'
        continue-on-error: true
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add src/locale/*.xlf
          git diff --quiet && git diff --staged --quiet || (git commit -m "chore: update translations" && git push)

      # Étape 5: Build de l'application avec toutes les langues
      - name: Build multilingual app
        run: npx ng build --localize --configuration=production --base-href=/angular-todo-app/

      # Étape 6: Créer le fichier 404.html
      - name: Create 404.html
        run: |
          cd dist/angular-todo-app/browser
          cp index.html 404.html

      # Étape 7: Déploiement sur GitHub Pages
      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist/angular-todo-app/browser
          enable_jekyll: false
          allow_empty_commit: true
          force_orphan: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
